{
	"info": {
		"_postman_id": "2e8b4841-178d-4a14-9667-eaac57564467",
		"name": "HW_3_Postman_Pustovar",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Приходящий токен необходимо передать во все остальные запросы\r",
							"var respData = JSON.parse(responseBody);\r",
							"var Get_token = respData.token\r",
							"pm.environment.set(\"token\", Get_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Anton",
							"type": "default"
						},
						{
							"key": "password",
							"value": "Qwerty",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверка структуры json в ответе\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\":{\r",
							"\t  \"person\": {\r",
							"            \"type\": \"object\",\r",
							"              \"properties\":{\r",
							"\t\t     \"u_age\": {\"type\": \"integer\"},\r",
							"\t\t     \t\"u_name\": {\r",
							"               \"type\": \"array\",\r",
							"              \"items\": [ \r",
							"                  {\"type\": \"string\"},\r",
							"\t\t\t\t  {\"type\": \"integer\"},\r",
							"\t\t\t\t  {\"type\": \"integer\"}\r",
							"\t\t\t]},\r",
							"\t\t\t\"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"           }\r",
							"\t\t },\r",
							"\t       \"qa_salary_after_12_months\": {\"type\": \"number\"},\r",
							"\t    \t\"qa_salary_after_6_months\": {\"type\": \"integer\" },\r",
							"\t\t \"start_qa_salary\": {\"type\": \"integer\" }\r",
							"    }\r",
							"} \r",
							"var respData = JSON.parse(responseBody);\r",
							"pm.test(\"JSON schema validation\", function() {\r",
							"  var result = tv4.validate(respData, schema, false, true);\r",
							"  if (result != true) {\r",
							"      console.log('Schema validation failed:', tv4.error.dataPath);\r",
							"  }\r",
							"  pm.expect(result).to.be.true;\r",
							"  console.log(result);\r",
							"});\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"let Salary_req = parseInt(pm.environment.get(\"salary\"));\r",
							"let Sal_6_months = parseInt(respData.qa_salary_after_6_months);\r",
							"let i = 2;\r",
							"pm.test(\"Responce_qa_salary_after_12_months = Request_sal * 2\", function () {\r",
							"    pm.expect(Sal_6_months).to.eql(Salary_req*i);\r",
							"\r",
							"});\r",
							"let Sal_12_months = parseInt(respData.qa_salary_after_12_months);\r",
							"let j = 2.9;\r",
							"pm.test(\"Responce_qa_salary_after_12_months = Request_sal * 2,9\", function () {\r",
							"    pm.expect(Sal_12_months).to.eql(Salary_req*j);\r",
							"\r",
							"});\r",
							"let Sal_1_5_year = parseInt(respData.person[\"u_salary_1_5_year\"]);\r",
							"let k=4;\r",
							"pm.test(\"Responce_u_salary_1_5_year = Request_sal * 4 \", function () {\r",
							"    pm.expect(Sal_1_5_year).to.eql(Salary_req*k);\r",
							"\r",
							"});\r",
							"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set (\"u_salary_1_5_year\", Sal_1_5_year );\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": {{age}}, \r\n\"salary\": {{salary}},\r\n\"name\": \"{{name}}\",\r\n\"auth_token\": \"{{token}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверка структуры json в ответе\r",
							"var schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"var respData = JSON.parse(responseBody);\r",
							"pm.test(\"JSON schema validation\", function() {\r",
							"  var result = tv4.validate(respData, schema, false, true);\r",
							"  if (result != true) {\r",
							"      console.log('Schema validation failed:', tv4.error.dataPath);\r",
							"  }\r",
							"  pm.expect(result).to.be.true;\r",
							"  console.log(result);\r",
							"});\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"let Salary_req = parseInt(pm.environment.get(\"salary\"));\r",
							"let Sal_0 = parseInt(respData.salary[0]);\r",
							"let Sal_1 = parseInt(respData.salary[1]);\r",
							"let Sal_2 = parseInt(respData.salary[2]);\r",
							"let i = 2;\r",
							"pm.test(\"Responce_salary[1] = Request_sal * 2\", function () {\r",
							"    pm.expect(Sal_1).to.eql(Salary_req*i);\r",
							"});\r",
							"let j = 3;\r",
							"pm.test(\"Responce_salary[2] = Request_sal * 3\", function () {\r",
							"    pm.expect(Sal_2).to.eql(Salary_req*j);\r",
							"});\r",
							"// проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Sal_2 > Sal_0 and Sal_1\", function () {\r",
							"    pm.expect(Sal_2 > Sal_1 && Sal_2 > Sal_0).to.be.true  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверка структуры json в ответе\r",
							"var schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"var respData = JSON.parse(responseBody);\r",
							"pm.test(\"JSON schema validation\", function() {\r",
							"  var result = tv4.validate(respData, schema, false, true);\r",
							"  if (result != true) {\r",
							"      console.log('Schema validation failed:', tv4.error.dataPath);\r",
							"  }\r",
							"  pm.expect(result).to.be.true;\r",
							"  console.log(result);\r",
							"});\r",
							"// В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"let reqData = request.data;\r",
							"let Daily_food = respData.daily_food;\r",
							"let Request_weight = reqData.weight;\r",
							"let i = 0.012;\r",
							"pm.test(\"Daily_food = Request_weight *0,012\", function () {\r",
							"    pm.expect(Daily_food).to.eql(Request_weight*i);\r",
							"});\r",
							"let Daily_sleep = respData.daily_sleep;\r",
							"let j = 2.5;\r",
							"pm.test(\"daily_sleep = Request_weight * 2,5\", function () {\r",
							"    pm.expect(Daily_sleep).to.eql(Request_weight*j);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "weight",
							"value": "95",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверка структуры json в ответе\r",
							"var schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"var respData = JSON.parse(responseBody);\r",
							"pm.test(\"JSON schema validation\", function() {\r",
							"  var result = tv4.validate(respData, schema, false, true);\r",
							"  if (result != true) {\r",
							"      console.log('Schema validation failed:', tv4.error.dataPath);\r",
							"  }\r",
							"  pm.expect(result).to.be.true;\r",
							"  console.log(result);\r",
							"});\r",
							"// Проверить что занчение поля name = значению переменной name из окружения\r",
							"let Env_name = pm.environment.get(\"name\");\r",
							"pm.test(\"Response_name =  {{name}}\", function () {\r",
							"    pm.expect(respData.name).to.eql(Env_name);\r",
							"});\r",
							"// Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"let Resp_age = parseInt(respData.age);\r",
							"let Env_age = pm.environment.get(\"age\");\r",
							"pm.test(\"Response_age =  {{age}}\", function () {\r",
							"    pm.expect(Resp_age).to.eql(Env_age);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anton",
							"type": "default"
						},
						{
							"key": "age",
							"value": "35",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Можете взять любой объект из присланного списка, используйте js random.\r",
							"var respData = pm.response.json();\r",
							"var item = respData[Math.floor(Math.random()*respData.length)];\r",
							"console.log(\"Random object = \", item);\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос\r",
							"var Cur = item.Cur_ID;\r",
							"pm.environment.set(\"Cur_ID\", Cur);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверка структуры json в ответе\r",
							"var schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"var respData = JSON.parse(responseBody);\r",
							"pm.test(\"JSON schema validation\", function() {\r",
							"  var result = tv4.validate(respData, schema, false, true);\r",
							"  if (result != true) {\r",
							"      console.log('Schema validation failed:', tv4.error.dataPath);\r",
							"  }\r",
							"  pm.expect(result).to.be.true;\r",
							"  console.log(result);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "variable_key",
			"value": ""
		}
	]
}